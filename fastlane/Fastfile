fastlane_version '2.137.0'
default_platform :ios

actions_path('./../../Fastlane Actions')

platform :ios do
  desc 'Submit a new Development Build to Apple TestFlight'
  lane :development do
    scheme = CredentialsManager::AppfileConfig.try_fetch_value(:scheme)
    archiveAndUpload(scheme: scheme)
  end

  desc 'Submit a new Test Build to Apple TestFlight'
  lane :test do
    scheme = CredentialsManager::AppfileConfig.try_fetch_value(:scheme)
    archiveAndUpload(scheme: scheme)
  end

  desc 'Submit a new Staging Build to Apple TestFlight'
  lane :staging do
    scheme = CredentialsManager::AppfileConfig.try_fetch_value(:scheme)
    archiveAndUpload(scheme: scheme)
  end

  desc 'Submit a new Production Build to Apple TestFlight'
  lane :production do
    scheme = CredentialsManager::AppfileConfig.try_fetch_value(:scheme)
    archiveAndUpload(scheme: scheme)
  end

  private_lane :archiveAndUpload do |options|
    scheme = options[:scheme]
    main_target = CredentialsManager::AppfileConfig.try_fetch_value(:main_target)
    version_number = get_version_number(target: main_target)
    sentry_project = CredentialsManager::AppfileConfig.try_fetch_value(:sentry_project)

    get_provisioning_profile(
      output_path: 'fastlane/build'
    ) unless ENV.key?('CI')
    build_ios_app(
      scheme: scheme,
      include_bitcode: false,
      output_directory: 'fastlane/build',
      output_name: "#{scheme}.ipa",
      silent: true
    )
    upload_to_testflight(
      skip_waiting_for_build_processing: true
    )

    begin
      sentry_upload_dsym
      sentry_create_release(
        version: "#{sentry_project}@#{version_number}"
      )
      sentry_auto_set_commits(
        version: "#{sentry_project}@#{version_number}"
      )
    rescue
      # Potentiall handle error
    end
  end
end
